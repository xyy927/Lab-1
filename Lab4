{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPfIu7hXcXz14sopnsi0YX6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/xyy927/Lab-1/blob/main/Lab4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "796LF2DcS8Ba",
        "outputId": "91c52568-6e79-4864-cae9-437ce4071cfa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(   PassengerId  Survived  Pclass  \\\n",
              " 0            1         0       3   \n",
              " 1            2         1       1   \n",
              " 2            3         1       3   \n",
              " 3            4         1       1   \n",
              " 4            5         0       3   \n",
              " \n",
              "                                                 Name     Sex   Age  SibSp  \\\n",
              " 0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
              " 1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
              " 2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
              " 3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
              " 4                           Allen, Mr. William Henry    male  35.0      0   \n",
              " \n",
              "    Parch            Ticket     Fare Cabin Embarked  \n",
              " 0      0         A/5 21171   7.2500   NaN        S  \n",
              " 1      0          PC 17599  71.2833   C85        C  \n",
              " 2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
              " 3      0            113803  53.1000  C123        S  \n",
              " 4      0            373450   8.0500   NaN        S  ,\n",
              "    PassengerId  Pclass                                          Name     Sex  \\\n",
              " 0          892       3                              Kelly, Mr. James    male   \n",
              " 1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
              " 2          894       2                     Myles, Mr. Thomas Francis    male   \n",
              " 3          895       3                              Wirz, Mr. Albert    male   \n",
              " 4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
              " \n",
              "     Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
              " 0  34.5      0      0   330911   7.8292   NaN        Q  \n",
              " 1  47.0      1      0   363272   7.0000   NaN        S  \n",
              " 2  62.0      0      0   240276   9.6875   NaN        Q  \n",
              " 3  27.0      0      0   315154   8.6625   NaN        S  \n",
              " 4  22.0      1      1  3101298  12.2875   NaN        S  )"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the datasets\n",
        "train_df = pd.read_csv('train.csv')\n",
        "test_df = pd.read_csv('test.csv')\n",
        "\n",
        "# Display the first few rows of the train and test dataframes\n",
        "train_df_head = train_df.head()\n",
        "test_df_head = test_df.head()\n",
        "\n",
        "train_df_head, test_df_head\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def standard_scaler(data):\n",
        "    # Mean and standard deviation of the data\n",
        "    mean = data.mean()\n",
        "    std = data.std()\n",
        "\n",
        "    # Standard scaling\n",
        "    scaled_data = (data - mean) / std\n",
        "\n",
        "    return scaled_data, mean, std\n",
        "\n",
        "numerical_features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']\n",
        "\n",
        "# Apply the custom standard scaler to the training data\n",
        "scaled_features = {}\n",
        "for feature in numerical_features:\n",
        "    train_df[feature], mean, std = standard_scaler(train_df[feature])\n",
        "    scaled_features[feature] = {'mean': mean, 'std': std}\n",
        "\n",
        "# Now we need to apply the same scaling to the test data\n",
        "for feature in numerical_features:\n",
        "    mean = scaled_features[feature]['mean']\n",
        "    std = scaled_features[feature]['std']\n",
        "    test_df[feature] = (test_df[feature] - mean) / std\n",
        "\n",
        "train_df[numerical_features].head(), test_df[numerical_features].head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Llct-N8eTIeC",
        "outputId": "a6303def-2adb-4006-a8f8-0e4b65f15793"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(     Pclass       Age     SibSp     Parch      Fare\n",
              " 0  0.826913 -0.530005  0.432550 -0.473408 -0.502163\n",
              " 1 -1.565228  0.571430  0.432550 -0.473408  0.786404\n",
              " 2  0.826913 -0.254646 -0.474279 -0.473408 -0.488580\n",
              " 3 -1.565228  0.364911  0.432550 -0.473408  0.420494\n",
              " 4  0.826913  0.364911 -0.474279 -0.473408 -0.486064,\n",
              "      Pclass       Age     SibSp     Parch      Fare\n",
              " 0  0.826913  0.330491 -0.474279 -0.473408 -0.490508\n",
              " 1  0.826913  1.190988  0.432550 -0.473408 -0.507194\n",
              " 2 -0.369158  2.223584 -0.474279 -0.473408 -0.453112\n",
              " 3  0.826913 -0.185807 -0.474279 -0.473408 -0.473739\n",
              " 4  0.826913 -0.530005  0.432550  0.767199 -0.400792)"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values in the training and test sets\n",
        "missing_values_train = train_df[numerical_features].isnull().sum()\n",
        "missing_values_test = test_df[numerical_features].isnull().sum()\n",
        "\n",
        "missing_values_train, missing_values_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NrnFrlXGTYIl",
        "outputId": "fc8b5fba-839b-4452-a6a5-ce8c3d271640"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(Pclass      0\n",
              " Age       177\n",
              " SibSp       0\n",
              " Parch       0\n",
              " Fare        0\n",
              " dtype: int64,\n",
              " Pclass     0\n",
              " Age       86\n",
              " SibSp      0\n",
              " Parch      0\n",
              " Fare       1\n",
              " dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Impute the missing values using median for 'Age' and 'Fare'\n",
        "train_df['Age'].fillna(train_df['Age'].median(), inplace=True)\n",
        "test_df['Age'].fillna(train_df['Age'].median(), inplace=True)  # Use the training median for the test set\n",
        "test_df['Fare'].fillna(train_df['Fare'].median(), inplace=True)\n",
        "\n",
        "# Check again for missing values to confirm they have been filled\n",
        "missing_values_train_after = train_df[numerical_features].isnull().sum()\n",
        "missing_values_test_after = test_df[numerical_features].isnull().sum()\n",
        "\n",
        "missing_values_train_after, missing_values_test_after\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VHNZhfoPTdRY",
        "outputId": "8df65bf5-980d-442f-c4cb-07da8f4ca9cb"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(Pclass    0\n",
              " Age       0\n",
              " SibSp     0\n",
              " Parch     0\n",
              " Fare      0\n",
              " dtype: int64,\n",
              " Pclass    0\n",
              " Age       0\n",
              " SibSp     0\n",
              " Parch     0\n",
              " Fare      0\n",
              " dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Define the features and target variable\n",
        "X = train_df[numerical_features]  # Features\n",
        "y = train_df['Survived']          # Target variable\n",
        "\n",
        "# Split the data into training and validation sets (80% train, 20% validation)\n",
        "X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "X_train.shape, X_validation.shape, y_train.shape, y_validation.shape\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JATBNOnSTsqk",
        "outputId": "4f8ac7c6-e231-4be1-8521-c2fae92b2b82"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((712, 5), (179, 5), (712,), (179,))"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Range of k values to try\n",
        "k_values = range(1, 50)\n",
        "accuracies = []\n",
        "\n",
        "# Loop over the range of k values\n",
        "for k in k_values:\n",
        "    # Initialize the KNN classifier with the current k value\n",
        "    knn = KNeighborsClassifier(n_neighbors=k)\n",
        "\n",
        "    # Fit the classifier to the training data\n",
        "    knn.fit(X_train, y_train)\n",
        "\n",
        "    # Predict on the validation set\n",
        "    predictions = knn.predict(X_validation)\n",
        "\n",
        "    # Calculate accuracy and append to list\n",
        "    accuracy = accuracy_score(y_validation, predictions)\n",
        "    accuracies.append(accuracy)\n",
        "\n",
        "# Plotting the results\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(k_values, accuracies, marker='o')\n",
        "plt.title('K-Value vs. Accuracy')\n",
        "plt.xlabel('k-value')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Best k value and the corresponding accuracy\n",
        "best_k = k_values[accuracies.index(max(accuracies))]\n",
        "best_accuracy = max(accuracies)\n",
        "\n",
        "best_k, best_accuracy\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 546
        },
        "id": "9SCs7RKWTyAc",
        "outputId": "a4e5aa96-69ca-4a56-9b6f-e40efb121765"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(40, 0.7486033519553073)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "import numpy as np\n",
        "\n",
        "# Initialize the KNN classifier with the best k value\n",
        "knn_best = KNeighborsClassifier(n_neighbors=best_k)\n",
        "\n",
        "# Perform 5-fold cross-validation\n",
        "cv_scores = cross_val_score(knn_best, X_train, y_train, cv=5)\n",
        "\n",
        "# Mean and standard deviation of cross-validation scores\n",
        "cv_mean = np.mean(cv_scores)\n",
        "cv_std = np.std(cv_scores)\n",
        "\n",
        "cv_mean, cv_std\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XSpit7ETT42-",
        "outputId": "62f785a0-2f7a-4f98-e1ef-6b083cc30f17"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0.7092287993696444, 0.028050480040893368)"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    }
  ]
}